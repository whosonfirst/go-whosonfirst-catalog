// Code generated by go-bindata.
// sources:
// static/templates/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\xb1\x92\xda\x30\x10\x86\xeb\xe3\x29\x76\xb6\x49\x52\x80\x5e\xc0\xa6\xba\x30\x43\x45\x49\x99\x91\xad\xf5\x59\x9c\x2c\x39\xd2\x9a\x83\x30\xf7\xee\x19\x21\x19\x30\x93\x34\xdc\x1d\x95\xe0\x5f\x7d\xff\xcf\xae\x6c\x9d\x4e\xa0\xa8\xd1\x96\x00\xb5\x55\x74\x40\x78\x7f\x9f\x15\x2d\x77\x66\x39\x03\x28\x5a\x92\x2a\x2e\x00\x0a\xd6\x6c\x68\xb9\x6d\xdd\xb7\x00\x1b\x0b\x2b\xed\x03\xc3\xda\x86\x9e\x6a\x76\xbe\x10\x49\x4f\xb5\x46\xdb\x57\xe0\x63\x4f\x25\x32\x1d\x58\xd4\x21\x20\x78\x32\x25\x06\x3e\x1a\x0a\x2d\x11\x23\xb4\x9e\x9a\x12\xa3\x28\x2a\xe7\x38\xb0\x97\xfd\xa2\xd3\x76\x71\x2e\x17\x8f\xb0\x76\x72\x2f\x43\xed\x75\xcf\x77\xc8\x5d\x22\x3e\x18\xcf\xd2\x81\xff\x50\xa4\x4c\xb3\x25\xab\x5b\xd4\x35\x00\x42\xf0\xf5\x34\xd2\x88\xc9\x81\x96\x85\x48\xc2\xc3\xb9\x3a\xd9\x47\xde\x5b\xeb\x82\xb3\x4d\x9c\xc8\x42\x8f\x13\xf9\x40\x17\xff\x83\xf6\x64\x15\xf9\x0f\x75\xe0\x1f\xd4\x17\x72\xbb\xe0\xee\x1b\xf2\x49\xf0\x1c\xf9\x4b\xd8\xd7\x4e\x7f\x31\x5e\x5b\xcd\x53\x0f\xc8\x9f\xf8\x88\x8a\xf1\x19\x2d\x2a\xa7\x8e\xd9\x5e\xe9\x3d\x68\x55\x62\x2d\xed\x5e\x06\x84\xda\xc8\x10\x4a\xac\x9d\x65\xa9\x2d\x79\xcc\x47\x2e\x97\x8e\xb2\xf4\x0a\x97\xb3\xa7\xcb\xf6\xdf\x03\xf9\x23\xde\xca\xf3\xe8\x76\xde\xff\x04\x50\x34\xce\x77\xa3\x1a\xd7\x73\x6d\x8d\xb6\x94\xd4\x29\xfb\x2c\xbf\x78\x37\xf4\xa3\x1a\x4f\xa5\xac\xc8\x40\xe3\x7c\x89\x6f\xae\xf9\xa5\x15\xde\xbf\x60\xbe\x6f\x37\xab\x1f\xb0\x7e\x2e\xc4\xb9\xf6\xba\x55\xdb\x7e\xb8\xed\x2f\x9e\x03\x67\x0a\x58\xd9\xd1\xf5\xdb\x5e\x9a\x81\x4a\x44\xe8\x8d\xac\xa9\x75\x46\x91\x2f\xf1\xa7\x65\xf2\x20\x61\xbb\x59\xc1\xfa\x19\x27\x41\x63\xa3\xbc\x33\x28\xc6\x7f\x22\x94\xde\x8f\xeb\x6a\x60\x76\x36\x7b\x87\xa1\xea\x74\x76\x37\xce\xbd\x0e\xfd\x85\x54\xb1\x85\x8a\xed\xbc\xf7\xba\x93\xfe\x88\xcb\xfc\xb6\x2c\x44\x22\xa4\x1e\x8a\x68\x18\x9b\x9e\x2c\xf2\x60\xaf\x33\x50\xc4\x52\x9b\x30\x9d\x42\x1c\x75\x3c\x0f\x29\xd5\xa5\xd6\x53\x18\x0c\xdf\xd5\x36\xce\x71\x9c\xd8\xc4\x60\xea\x36\xf9\xa5\x10\xe9\x20\x15\x22\x5d\x03\xa7\x13\x90\x55\xf1\x5e\xf8\x1b\x00\x00\xff\xff\x49\x5d\xb4\x47\x2d\x06\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 1581, mode: os.FileMode(420), modTime: time.Unix(1563909892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

