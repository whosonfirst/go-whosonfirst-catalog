// Code generated by go-bindata.
// sources:
// static/templates/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xb1\x72\xdc\x20\x10\x86\x6b\xdf\x53\xec\x6c\x93\xee\x78\x01\x50\x95\x78\xc6\x95\x4b\x97\x19\x4e\xac\xa2\x3d\x23\x50\x60\x25\xdf\x45\xe3\x77\xcf\x20\x64\xfb\xec\x71\x95\xf8\x54\xa1\xff\xdf\xf9\xf8\x59\x69\x59\x16\x70\xd4\x71\x20\x40\x0e\x8e\x4e\x08\xcf\xcf\x3b\xdd\xcb\xe0\x9b\x1d\x80\xee\xc9\xba\xb2\x00\xd0\xc2\xe2\xa9\x79\xe8\xe3\xb7\x0c\xf7\x01\x6e\x39\x65\x81\xbb\x90\x47\x6a\x25\x26\xad\xaa\x5f\x6b\x3d\x87\x47\x90\xf3\x48\x06\x85\x4e\xa2\xda\x9c\x11\x12\x79\x83\x59\xce\x9e\x72\x4f\x24\x08\x7d\xa2\xce\x60\x31\xd5\x60\xc7\x3f\x14\xf6\xc7\xbc\x5f\x4b\xd5\x7f\x72\x9e\xfa\x98\x63\xe8\x4a\xc4\x3d\xbf\x44\xfc\x7a\x74\xa2\xe0\xe8\x03\x37\xb7\x89\x47\xb9\x24\x1f\xed\x6c\xab\x8a\x90\x53\x6b\xf0\x42\x51\x81\x4e\x52\xb0\x03\x97\xd3\x63\xa3\x55\x35\xfe\x8d\xf6\x49\xc6\x5f\x14\x8f\x39\x5e\x09\xbe\x35\xe0\x2a\xec\xb7\xef\x76\x65\x3c\x07\x96\xf7\x7b\xc0\xf6\x94\x09\x50\x2f\x23\xa0\x0f\xd1\x9d\xb7\xed\x1d\xcf\xc0\xce\x60\x6b\xc3\x6c\x33\x56\xf5\x55\x07\x83\xbf\x27\x4a\x67\x6c\x76\x37\xba\x8b\x69\x68\x76\x37\x00\x9a\xc3\x38\x5d\x46\xc6\x15\xf1\x14\xbb\x9f\xec\x10\x82\x1d\xe8\xed\x6d\xb6\x7e\x22\x83\x08\xa3\xb7\x2d\xf5\xd1\x3b\x4a\x06\x7f\x04\xa1\x04\x16\x1e\xee\x6f\xe1\xee\xfb\xfa\xcf\x15\xf0\x61\x12\x89\x61\x23\xe7\xe9\x30\xf0\xc6\xf6\x31\x3e\x4e\x23\x36\xdb\x94\x6a\x55\x2b\x4b\x2c\x55\x73\x6d\xb9\x95\xe3\xf9\xc3\x21\x0c\x3a\x12\xcb\x7e\xed\xcb\x67\x76\xa2\x3c\x79\x79\x6f\xbf\x2e\xb5\xaa\xdd\xd2\xaa\x5e\x25\xcb\x02\x14\x5c\xb9\x5b\xfe\x06\x00\x00\xff\xff\x37\xd8\x9c\x68\x71\x04\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 1137, mode: os.FileMode(420), modTime: time.Unix(1563907114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

