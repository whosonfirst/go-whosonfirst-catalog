// Code generated by go-bindata.
// sources:
// static/templates/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\xb1\x92\xda\x30\x10\x86\xeb\xe3\x29\x76\xb6\x49\x52\x80\x5e\x40\xa6\xba\x30\x43\x45\x49\x99\x91\xad\xf5\x59\x9c\x2c\x39\xd2\x9a\x83\x30\xf7\xee\x19\x61\x19\x30\x93\x34\xdc\x1d\x95\xf0\xae\xbe\xff\xe7\x5f\x59\x9c\x4e\xa0\xa9\x36\x8e\x00\x8d\xd3\x74\x40\x78\x7f\x9f\xc9\x86\x5b\xbb\x9c\x01\xc8\x86\x94\x4e\x0b\x00\xc9\x86\x2d\x2d\xb7\x8d\xff\x16\x61\xe3\x60\x65\x42\x64\x58\xbb\xd8\x51\xc5\x3e\x48\x31\xd4\x87\x5e\x6b\xdc\x2b\xf0\xb1\xa3\x02\x99\x0e\x2c\xaa\x18\x11\x02\xd9\x02\x23\x1f\x2d\xc5\x86\x88\x11\x9a\x40\x75\x81\xa9\x28\x4a\xef\x39\x72\x50\xdd\xa2\x35\x6e\x71\x6e\x17\x8f\xb0\x76\x6a\xaf\x62\x15\x4c\xc7\x77\xc8\xdd\x40\x7c\xd0\x9e\xa3\x03\xff\xa1\x44\x99\x7a\x1b\xa4\x6e\x51\x57\x03\x08\x31\x54\x53\x4b\x23\x26\x1b\x5a\x4a\x31\x14\x1e\xf6\xd5\xaa\x2e\xf1\xde\x1a\x1f\xbd\xab\xd3\x44\x16\x66\x9c\xc8\x07\x52\xfc\x0f\x3a\x90\xd3\x14\x3e\x94\xc0\x3f\xa8\x2f\xe4\x77\xd1\xdf\x07\xf2\x49\xf0\x6c\xf9\x4b\xd8\xd7\xa4\xbf\x18\x6f\x9c\xe1\xa9\x06\xe4\x4f\x7a\x45\xc5\xf8\x8e\xca\xd2\xeb\x63\x96\xd7\x66\x0f\x46\x17\x58\x29\xb7\x57\x11\xa1\xb2\x2a\xc6\x02\x2b\xef\x58\x19\x47\x01\xf3\x91\xcb\xad\x63\x59\x05\x8d\xcb\xd9\xd3\x65\xfb\xef\x9e\xc2\x11\x6f\xcb\xf3\xa4\x76\xde\xff\x04\x20\x6b\x1f\xda\xf3\x6a\xca\x49\x8f\xe7\x2f\xc1\xf7\x1d\xe6\x6a\x3a\x81\xaa\x24\x0b\xb5\x0f\x05\xbe\xf9\xfa\x97\xd1\x78\x7f\x99\x7c\xdf\x6e\x56\x3f\x60\xfd\x2c\xc5\xb9\xf7\xba\xd5\xb8\xae\xbf\xcd\x12\xcf\xe6\x32\x05\x9c\x6a\xe9\xfa\x6d\xaf\x6c\x4f\x05\x22\x74\x56\x55\xd4\x78\xab\x29\x14\xf8\xd3\x31\x05\x50\xb0\xdd\xac\x60\xfd\x8c\x13\xa3\x29\x94\xe0\x2d\x8a\xf1\x97\x08\x6d\xf6\xe3\xba\xec\x99\xbd\xcb\xda\xb1\x2f\x5b\x93\xd5\xad\xf7\xaf\x7d\x77\x21\x95\xec\xa0\x64\x37\xef\x82\x69\x55\x38\xe2\x32\xdf\x8c\x52\x0c\x84\x21\x2f\x91\x03\xcb\x12\x79\x88\xd7\xbc\x35\xb1\x32\x36\x4e\x13\x4f\x63\x4d\xb3\x1f\x5c\x5d\x7a\x03\xc5\xde\xf2\x5d\x6f\xed\x3d\xa7\xe9\x4c\x04\xa6\x6a\x93\x27\x52\x0c\x87\x46\x8a\xe1\xca\x3f\x9d\x80\x9c\x4e\xff\x01\x7f\x03\x00\x00\xff\xff\xf1\x07\x0e\x7d\x19\x06\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 1561, mode: os.FileMode(420), modTime: time.Unix(1563909791, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

