// Code generated by go-bindata.
// sources:
// static/javascript/mapzen.whosonfirst.geojson.js
// static/javascript/mapzen.whosonfirst.inspector.init.js
// static/javascript/mapzen.whosonfirst.inspector.js
// static/javascript/mapzen.whosonfirst.render.js
// static/css/mapzen.whosonfirst.inspector.css
// static/css/mapzen.whosonfirst.render.css
// DO NOT EDIT!

package http

import (
	"github.com/whosonfirst/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticJavascriptMapzenWhosonfirstGeojsonJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xcf\x6e\x9b\x40\x10\xc6\xcf\xf8\x29\xa6\x27\x83\x82\xb0\x9d\xaa\xad\x14\x42\xa4\xaa\x52\x6f\x7d\x02\x84\xa2\x8d\x19\x60\x5b\x98\x45\xb0\x24\x4e\x1d\xbf\x7b\xb5\xff\x00\x1b\x5b\xbd\xb1\xf3\x7d\xfb\xdb\x99\xd9\x59\x5e\x59\x07\x0d\x6b\xff\x22\x41\xe2\x3e\x3e\x3e\xe0\x78\x8a\x57\x66\x15\xbd\x55\xa2\x17\x54\xf0\xae\x97\xa3\xe5\x2c\x68\xed\x57\xfc\x51\x89\xe2\x77\x2f\x14\xda\x2f\x06\xda\x4b\x2e\xc8\x0f\x8e\xab\x95\xa7\x8e\xed\xb1\x2e\x20\x01\xb5\xf4\xd6\x39\x76\xfc\x15\x9f\x5f\x5e\xc4\x61\xfd\x00\xa3\xd9\x02\xf4\x1e\xcf\xe3\x05\xb8\x48\xba\xd6\xd6\x2c\x38\x2a\xc1\xeb\x50\x0e\x1d\xc1\x85\x18\x2b\xed\xb4\xdc\x2a\xdf\x5b\x5c\x67\x90\x24\xb0\xfe\x89\x4c\x0e\x1d\xfe\x10\x75\x8d\xfa\xc8\xb5\x3d\x4b\xa7\x58\x18\xb5\x87\x64\x42\xbb\x98\xc5\x6b\xdf\x5e\x0c\xa4\xba\xe3\xb4\xa8\x46\x2a\x65\x15\x4f\xa4\xfe\xad\x66\xca\x31\x50\x8e\x05\x27\xcc\xe3\xb9\xa4\x5b\x74\x45\x22\xbc\xb9\x8b\x70\xb1\x4b\x6b\x85\xe8\xc0\x57\x06\x9e\x6c\x63\xe0\xf0\x68\x92\x8b\x81\xdf\xdd\xb9\xd2\x34\x40\xb5\x08\x12\x7d\x0b\xd1\xac\xfb\xbe\xab\x21\xe5\x59\x10\xcf\xfc\xcf\xae\x04\xe5\x4a\xb7\xb6\xfa\x51\xd2\xc9\x68\x69\x77\x26\xb9\x12\xb4\x74\x7f\x29\x4d\xbb\x3e\x67\xee\x30\x75\x55\xfe\x27\xd3\xb1\x40\x4d\x97\x6f\x8f\x7e\xb4\x31\x7b\xe7\x9e\xe7\x32\x32\xba\x45\x9f\x16\x18\x41\x13\x46\x90\xc1\x08\x3a\xc3\xe8\x3c\x8c\x7e\x1d\xa3\xcb\xb0\x18\x53\xd2\x93\x8d\x8d\x18\x57\xa9\xd1\x6f\x62\xc6\x6c\x4c\xf9\x4f\x36\x36\xc7\x98\x6c\xf4\xc7\x88\x99\xc1\xec\xb0\xa7\xa6\x1d\xa1\x29\x27\x34\xe9\x84\x76\x30\xe6\xb3\x8f\x75\x8f\xf0\x9f\x07\x30\x8e\xfd\x66\x03\xdf\x73\xd6\x4a\xcc\xa1\xe8\x44\x03\x95\x94\xed\xc3\x66\x53\xf2\x3e\xea\x25\xdb\xff\xc1\xc3\xbe\x62\x54\x62\xb4\x17\xcd\x86\x6d\x76\xdf\xee\xbf\x7c\xdd\x8d\x53\x59\xa2\x68\xe6\x8f\x45\xad\x51\x76\xef\xe7\x8f\x45\x74\xb9\x7d\x52\x4d\xa4\x57\x9c\x98\xc4\x7e\xf6\x5c\x6a\x26\x95\x23\xcd\x42\x1d\x02\x00\xa8\xa9\x34\xa1\xc5\xa0\x43\x02\xe3\xa8\x2b\x74\xba\xcd\xdc\x03\xd4\x53\x0f\xb6\xb5\x0a\x1a\xb5\x43\x5f\xf9\xa3\x2f\xe5\x59\xba\x53\x73\x6e\x0c\x54\x5e\x33\x6c\x9d\xe1\x34\x25\xd8\x70\x32\xb7\xfd\x8b\xc9\x2a\x6a\x38\x45\xac\x6d\xeb\x77\x9f\x86\xba\x0e\x75\xfa\xc1\x94\x7a\xc3\x0e\x73\x33\x3b\x2c\xcd\xf1\x19\x99\xca\x9b\x64\x2a\x2f\xc9\x33\xf3\x25\x59\x99\xe3\x8b\xa1\x31\x99\x87\xf6\x1c\x83\xf2\x6c\x8a\xa1\x03\x2e\xc6\xe7\xa8\x26\x50\xad\xd5\x9f\xde\xc1\xd4\xbf\x23\x5e\xad\x4e\x81\x1f\xc4\xab\x7f\x01\x00\x00\xff\xff\x2a\x82\x1a\x4f\x4a\x06\x00\x00")

func staticJavascriptMapzenWhosonfirstGeojsonJsBytes() ([]byte, error) {
	return bindataRead(
		_staticJavascriptMapzenWhosonfirstGeojsonJs,
		"static/javascript/mapzen.whosonfirst.geojson.js",
	)
}

func staticJavascriptMapzenWhosonfirstGeojsonJs() (*asset, error) {
	bytes, err := staticJavascriptMapzenWhosonfirstGeojsonJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/javascript/mapzen.whosonfirst.geojson.js", size: 1610, mode: os.FileMode(420), modTime: time.Unix(1563546049, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticJavascriptMapzenWhosonfirstInspectorInitJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x41\x8b\xdb\x30\x10\x85\xcf\xd6\xaf\x18\x74\x52\x20\x88\xde\x5d\x1f\xda\x12\x48\x20\xbd\x05\x7a\x2c\x5a\x69\x9c\x88\x28\x23\x23\xc9\x31\xd9\xe0\xff\xbe\x48\x31\xde\xec\x12\x7c\x91\xc7\xe3\xf7\xbd\xf1\x3c\x0d\x96\x8c\x1f\xa4\x32\x66\x73\x45\x4a\x7b\x1b\x13\x12\x06\xc1\x9d\x57\x86\xaf\xa1\xed\x49\x27\xeb\x09\xf2\xbb\xc0\xac\x59\xdd\x59\xc5\xaa\xab\x0a\xf0\xd6\xa7\xe4\x09\x1a\x30\x5e\xf7\x17\xa4\x24\x8f\x98\x36\x0e\x73\xf9\xfb\xb6\x33\xd9\xc5\x9f\xfb\x8e\xaf\xea\x8c\x3c\xe4\xd2\x93\x76\x56\x9f\xa1\x99\xcd\xc5\xea\xce\x58\x05\x00\x90\xc2\x0d\xee\x2c\x57\x55\x99\x60\xcd\x92\xfb\xe0\xdb\xff\xd6\x64\x77\x56\x55\x45\x6a\x8d\xbc\x2a\xd7\x63\xfd\xd4\x48\xc1\x5e\xc4\xa4\x69\x41\xe4\x76\x03\x9c\xe7\x35\xca\xcc\x80\xa9\x0f\x04\xad\x72\xb1\x70\xe3\xec\xd6\xa9\x10\x71\x47\x49\x58\xf3\x85\xff\x09\x3f\x96\xe9\x8b\xea\xde\x91\xe4\x70\xf2\xd1\x53\x6b\x43\x4c\xd2\x52\xec\x50\x27\x1f\xe4\x23\x13\x61\xcd\x67\xba\x22\xc4\x6e\x76\x9c\x1e\x79\xfd\x00\x0d\x2c\x7a\x05\x24\x83\xa1\xe0\xf5\x0b\x1c\x63\xef\x52\x5c\x8a\x70\x92\xf0\x19\x9f\x1a\xd2\x12\x61\xd8\x1e\xfe\xee\x21\x87\x55\xb6\x7f\xfe\xac\xba\x0e\xc9\xfc\x39\x59\x67\x44\x28\xf0\x98\xcf\x2c\x19\xd9\xf4\x1f\xf9\xd4\x2a\xe9\x13\x08\x2c\xdb\x69\x4f\xd1\x3b\x94\xce\x1f\x05\xff\xb7\xfd\x75\xe0\x6b\xc0\xef\x58\xb9\xfc\x17\xc9\x8e\x35\xcb\x23\x3e\x02\x00\x00\xff\xff\x40\x1b\x11\x0b\xb1\x02\x00\x00")

func staticJavascriptMapzenWhosonfirstInspectorInitJsBytes() ([]byte, error) {
	return bindataRead(
		_staticJavascriptMapzenWhosonfirstInspectorInitJs,
		"static/javascript/mapzen.whosonfirst.inspector.init.js",
	)
}

func staticJavascriptMapzenWhosonfirstInspectorInitJs() (*asset, error) {
	bytes, err := staticJavascriptMapzenWhosonfirstInspectorInitJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/javascript/mapzen.whosonfirst.inspector.init.js", size: 689, mode: os.FileMode(420), modTime: time.Unix(1563546049, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticJavascriptMapzenWhosonfirstInspectorJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5b\x6f\x1b\xb9\xf5\x7f\x96\x3e\x05\xc3\x3f\xb0\x1e\x21\xf2\x38\x97\xff\x43\x21\x55\x0f\xdd\x45\x76\xb7\x5b\x27\x29\x92\xa0\x28\x30\x50\x05\x7a\xe6\x48\xe2\x7a\x44\x4e\x48\x4e\x64\xc5\xab\xef\x5e\xf0\xce\x91\xc6\xb2\xd4\xbe\x34\x0f\xb1\x87\xfc\x9d\x0b\xcf\x95\x3c\xfe\x46\x04\xda\x90\xe6\x3b\x30\x34\xf3\xbf\xfc\xf1\x07\x7a\xdc\x4f\x87\xf6\x2b\xdf\xae\xb9\xe4\x6c\x49\x85\x54\x01\xd2\x59\x74\xf0\x1e\x7c\x4e\x99\x6c\xa0\x54\x5c\xa0\x19\xca\x96\x2d\x2b\x15\xe5\x2c\x1b\x3d\x0e\x87\x08\x21\xa4\x65\x97\xa4\x5c\x03\x9a\x59\x0e\x7e\x51\x42\xbd\xd4\x6b\xc3\xc1\x70\x70\x55\x73\x7e\xdf\x36\x57\x13\x14\xe8\x69\x35\x46\xe5\xdd\xe8\x71\x38\xd0\x04\xf6\x7f\x4d\xd6\x08\xae\x38\x9a\xa1\x8a\x97\xed\x06\x98\xca\x6b\x5e\x12\x4d\x91\x9b\x9d\x92\xd7\xd3\x08\x6e\x45\x8d\x66\x8e\xe4\x25\xba\xba\xb9\xb9\x42\x2f\x51\x20\x58\x73\xa9\xd2\xef\x86\xa8\x35\x23\x1b\xd0\x50\x5a\x19\x2c\xad\xa6\x87\x0a\x70\x56\x73\x52\xa1\x59\x54\x55\xc8\x46\xeb\x39\x18\x0e\x06\x1a\xa0\x88\x58\x81\x36\xa3\x90\x4d\x6e\x3f\xa6\x76\x97\x2e\x51\x66\x17\x72\x01\xa4\xda\x7d\x56\x44\x01\x7a\x31\x43\xff\x6f\xe8\xb5\x04\x01\xaa\x15\x4c\xe3\xf7\x91\xa3\x54\x44\xb5\x72\x51\xf2\x4a\x5b\xd1\x72\x28\xae\xec\xea\xd5\x7c\xda\x45\x29\x78\x50\x47\xa8\x2f\xf0\xa0\x2c\xd2\x81\x05\xd9\x26\x20\x01\xb2\xe1\x4c\x42\x84\x69\x4c\x45\x14\x41\x33\xc4\xda\xba\x76\x94\x4a\xec\x90\xd7\xd4\xed\xfe\xf6\xf9\xe3\x87\xbc\x21\x42\x42\x26\xc8\x76\x94\x68\x5e\x12\x55\xae\x51\x06\xe1\x6c\x25\x67\x92\xd7\x90\xd7\x7c\x95\xe1\x77\x9f\x3e\xe1\xb1\x76\xd0\x18\xc1\xa8\x73\x78\xb4\x24\xb5\x84\x94\xd1\x5d\xa6\x85\x8d\x9c\x2b\xf6\x47\x2e\x11\xf0\x55\xeb\x09\x5b\xf4\xcf\xf7\xb7\xbf\x2a\xd5\x7c\x82\xaf\x2d\x48\x95\x79\x12\x01\x5f\x73\x52\x55\xef\xbe\x01\x53\xb7\x54\x2a\x60\x20\x32\xac\xfd\x88\xc7\xce\xa1\xa3\x0e\x57\x4d\xc0\x1b\x60\x19\xfe\xe5\xdd\x17\xaf\xa7\x12\x2d\xa4\x1c\x25\xb0\xca\x88\xd8\x8f\x4d\x10\x0b\x60\x15\x88\x34\x88\x5d\x64\x1c\x6a\x5b\x72\x51\x49\x1b\x20\x05\x76\x9f\xa0\xf0\x3c\x7c\xe0\x79\x12\xc4\x25\x6f\x99\x09\x27\xbb\x97\xd7\xc0\x56\x6a\x7d\x64\x84\xbb\xdd\x42\xed\x1a\x9f\x66\x61\x59\xaf\x69\x59\x45\xca\x52\xf2\x56\x94\xdd\x65\xfb\xff\x92\x0b\x94\x69\x04\x9d\xbd\x9a\x22\x8a\xfe\x6c\xa5\x4f\x11\x7d\xf9\x32\x8d\x71\x11\xf5\x29\x68\x08\x18\xa3\x65\x81\xb5\x48\x3c\x4f\x62\xfe\x85\x57\xae\x50\xf3\x10\x0d\xee\x47\xdc\xd1\xda\x20\x81\x0c\xa1\xde\x31\x9a\xe7\x4d\x2b\xd7\x99\x4a\xe3\x0a\x6a\x09\x21\x0a\x23\xb9\x45\x0a\x8f\x34\x91\x92\x1e\xcd\xb2\x93\x5c\xc4\xb0\x48\xac\x44\xee\x6a\x48\xab\x4a\x29\x80\x28\x78\x57\x83\xfe\xca\xb0\xd9\xc7\xc7\x74\xd6\x90\x8b\x35\x90\x0a\xc4\x29\xfa\x75\x20\xee\x90\xe4\xa4\x69\x80\x55\x3f\xad\x69\x5d\x65\x07\xc4\x3a\x19\x3f\xf0\x0a\x32\x6c\x49\xf0\xa8\x47\xef\x5d\x73\x99\xf4\x84\xe0\x3c\xd9\xc6\x99\x3d\x92\xd7\x44\xae\x2f\x92\x9c\x10\x9c\x27\x59\x13\x18\xc9\x51\x68\x4d\xa4\xda\xf0\xea\x22\xb9\x5d\x9a\xf3\x44\x6b\x1a\xb4\xe1\x15\x5d\x52\xa8\xfa\x4e\xdf\x0a\x7a\x91\x12\x11\x7f\x9e\x02\xad\xa0\xbd\xee\xa6\x1b\xca\x56\x97\x39\x3c\x25\x39\xd3\xe5\x86\xa4\x4f\xbe\x5c\xf3\xed\x65\xc1\x1e\x09\xce\x93\x7d\xdd\x27\xb6\x02\x45\x68\x2d\x2f\x92\xdc\xa5\xf9\x2f\x84\x5b\x06\x0b\xc1\xb7\xa7\x04\x8b\x18\xe7\x01\xdf\x11\xda\x49\xfb\x67\xb0\x49\x92\x3e\x83\x4c\x92\xea\x19\x64\x37\x0d\x9e\x01\xc7\x70\x7d\x4e\xd3\x34\xba\x9e\xc1\x76\x3d\xd2\x35\xb4\xa9\xaf\xdd\x93\x05\x26\xa3\xfe\x0e\xa5\x10\x65\xb6\xa8\xfb\xc6\x64\xae\x3d\x7a\xa1\x50\xb1\x25\x69\x53\xc6\x8e\x1b\xdb\x45\x72\x17\x32\x2d\x2e\x01\xa5\x34\xb1\xdb\x7a\xf4\xdd\x6e\x61\x7d\xe9\x3b\xed\xa0\xa7\xa3\x6a\xf0\x13\xbd\xd4\x73\x8e\x3d\x35\xe9\x86\xc9\xb5\x2b\xd5\xc2\xf4\xd8\x04\x12\x14\xd0\xd8\xc2\xf7\x87\xf9\x74\x30\x30\x92\xd3\xee\x10\x40\xb1\x2b\x27\x45\x2c\xec\xea\x82\xd3\xd9\xb4\x9e\x8d\xd4\xb6\x26\xcc\xd1\x0d\x7a\xfd\xca\xff\x9b\x0e\x6e\x6e\x10\x23\x8c\x4b\x28\x39\xab\xa4\x25\x4f\x98\xe8\xf0\x0c\x2c\x4c\x3d\x37\x3a\x1e\xe1\x5c\x72\x94\x50\xd7\xcf\x67\x77\xda\x45\x35\xc5\x59\xb9\x6d\xf1\xa3\x40\x7f\x60\xa5\x67\x45\x57\x51\x74\xc0\x9f\x25\x58\xa3\x7b\xc5\x9a\xd4\xbd\x40\x6c\xc0\x9f\x25\x56\xa3\x6d\xef\x3c\x6a\x9e\x17\xc8\x4c\x49\xce\x2b\xa1\x8f\x9d\xd6\xb9\xc7\x07\x3a\xe8\xc2\x72\x81\x7c\x0f\x3f\x4b\x76\x2b\x68\xbf\x7f\x6d\x8d\xba\xc4\xc3\x91\xe2\x3c\x1f\x1b\x7c\xae\xf8\xcf\xf4\x01\xaa\xec\xed\x08\xbd\x44\x58\x1e\x9e\xdd\xd7\xbf\x0b\x14\x49\x49\x72\x09\xea\x2f\x4a\x09\x7a\xd7\x2a\xc8\x70\x59\x13\x29\xf1\x18\xe1\xb2\xa6\xe5\xfd\xf5\x06\xce\xa2\xd2\x99\x78\x2d\x60\xc3\x15\x5c\xeb\x94\xd7\x2f\x1b\x3a\x9a\x6a\xba\x3e\xe2\xb3\x5c\xee\x28\x0e\x8f\xbb\x01\x45\xce\xea\x9a\x8e\xc6\x3c\x8e\x4d\xc1\x9a\x21\x0c\x42\x70\x81\x4d\x75\x1c\x78\x46\x4f\x19\xc0\x61\xfd\xe9\xf7\x9e\x61\xa0\xeb\x69\xc3\xfa\x74\x81\xa2\x17\x18\xb2\xfc\x34\x2c\x64\xe5\x69\x58\x9a\x48\xa7\x91\x3e\xe4\x9f\xd1\x2e\x46\xe8\x69\x60\xea\xce\xc3\xe4\xe8\xb8\x9a\x33\x13\x48\xe9\x5c\xc3\xbe\xdc\x75\xb5\x36\x2d\x0e\x74\xd4\x42\x32\xd1\x18\xc4\x26\x02\x75\xbe\x3a\x19\x68\x23\xd7\x14\x07\x12\xea\x65\x6e\xae\x85\x4e\xbc\xc9\xdb\xe0\xbc\x10\x0e\xe9\x8d\x20\xf3\x47\x8b\xd1\x62\x46\x4a\x45\x2b\xe8\xdc\xf5\x97\xa9\x3d\x57\xdf\xcb\xcf\x8d\x15\x0c\x47\xfb\x5a\x1f\x0e\xae\xd6\xb4\x02\xaf\x42\xfa\x64\x1f\x3d\x0e\x8f\x2e\x9e\x69\x08\xaf\x40\xb9\xf8\xfd\x71\xf7\xd7\x2a\x89\xfe\xee\xbd\x33\xa7\x8c\x81\xf8\xf5\xcb\xfb\x5b\x34\x43\x18\xc7\x21\x41\x7a\xf4\x54\xae\xb6\x82\x17\x6d\x6c\x94\x2a\x98\x75\x5e\x41\xee\x82\x10\x4d\x90\xbc\xec\xef\x78\xb5\x0b\x1d\x57\x7f\x74\x46\x09\xbd\x17\x82\xb8\xbd\x15\xda\xde\xa7\x2e\xd8\x15\xfd\x16\x4e\xea\xd0\x07\x69\x49\x2b\x9d\x93\xfe\xc5\x9a\x72\x5f\x02\x51\xad\xd0\xf2\xcd\xf9\xb4\x12\x0b\xc5\x17\x6e\xb9\x33\xe2\x71\x83\xbe\x46\x5b\xde\xed\x17\x58\x2f\x80\x50\x14\x64\xd4\xda\x83\x7a\xc6\x92\x76\x1a\xe3\x7e\x2c\x34\xf7\xcc\xa0\x0f\xd5\x4f\xb3\xc5\x03\xa2\x16\x1b\xd2\x9c\x69\x8e\x0d\x69\x7a\x4d\xb1\x21\x4d\xd7\x0e\x97\xcd\x1a\x0c\xc5\xc9\x37\x8f\xe8\xb2\xaf\x61\xa9\xce\xec\x31\x61\x22\x45\x57\xeb\x33\x69\xdc\x9b\xda\xcb\x08\x09\x4a\x9a\x30\x19\x0b\xcc\xfc\xa6\xb3\x74\xa0\x56\x5d\xa3\x07\x66\xe1\xc9\xda\xdd\x8f\x0c\x23\x87\xa3\xe7\x82\x12\xdd\x14\xf9\xcf\x13\xb7\xc3\x55\xcb\x09\x8c\x6d\xd8\x0a\xb2\x5d\x6c\x48\x93\xb9\xb8\x1c\x85\x8a\xe2\x77\xd2\xac\xf6\xa0\xb4\xa8\x9c\x15\xd8\x76\x6c\x66\xe3\x51\x57\xe1\x30\x17\xf6\x2d\x2e\x24\xfc\x1d\x7f\xe8\x4f\x80\x15\xf0\xdf\x25\x67\x79\x05\x82\x7e\x83\x85\x06\x26\x4a\x27\x8f\x7a\xdd\xa2\x6f\xf3\x9a\xa8\x5b\xb6\xca\x34\xac\x78\x3d\x1f\x1b\xc6\xc5\xab\x79\x1a\x27\x0c\x8e\x90\x6f\x3d\xf2\xcd\xbc\xc3\x94\x34\x74\x71\x0f\xbb\xd4\x01\xba\x1a\xf5\x75\x09\x06\x0f\xea\x3b\xb0\x6b\xd2\xd0\xeb\x7b\xd8\x99\x28\x43\xc9\x3f\x9b\x82\xb7\xf9\x07\x8b\xcb\xb5\xf1\xaf\xb4\x9d\xc7\x61\x0a\xa8\x08\x5b\x09\xb2\xf9\xd8\x68\xa3\xcb\x89\x59\x1f\x90\x86\xfe\x0d\x76\x13\xaf\xca\x58\xaf\x55\x70\xd7\xae\x26\x76\xc2\x6c\x16\x64\x09\x0c\x1c\x81\xb1\xfb\xa6\xe1\x42\x4d\x50\xa1\x17\xcc\x0a\xba\xba\x71\xec\x6f\x04\x2c\x69\x5d\x5f\x4b\xb5\xab\x21\xff\x4e\x9b\xab\x71\x44\xcd\xcd\xef\xfb\x70\x09\x19\x0c\xf6\xdd\x87\xab\xf6\x68\x26\xb7\x05\xae\x89\xc2\x73\x7d\xcb\x61\xe0\x3e\x46\xe8\x87\x1f\x90\xdd\x33\x6f\x2c\xbf\xa7\x3f\x46\xc6\xfd\xae\xb8\xfc\x83\xc2\x36\x93\xdb\x31\x7a\xfd\x26\x4c\xc3\x53\x19\x61\x34\xaa\xf1\x4b\xaa\x7e\xe4\x2d\xab\x64\x56\x68\x12\x06\xf3\x51\x4f\xfc\xd4\x64\x67\x2a\xfe\xad\x8e\x97\xdf\x3e\x7f\xfc\x90\x06\xb6\x7d\x03\xec\x74\x95\xac\xaa\x2f\xdc\xa7\xb9\x8b\xf7\x6e\x01\x4f\xc3\xde\xd4\xf2\xa3\xc1\xf7\x89\xee\xd3\xb9\xfc\xb9\xc0\xc5\x49\xe0\xf7\x35\xb4\xfd\xa1\x75\x03\x83\x86\x4b\xb5\xa2\x12\xa7\x13\xeb\xfe\xc6\x38\xd0\xbf\x15\xf8\x3d\x28\xa2\xed\x9e\xfe\x35\x23\xdd\x19\x25\xef\xff\x15\xf0\x4d\x32\xdb\xb6\xb0\x5f\x80\x6f\x70\x9c\x6d\x6b\x4c\x1f\x37\x07\x7b\x6a\x98\xfd\x14\xd9\x4f\xc0\x94\xe0\xb4\xea\x92\xde\xdc\xa0\x0a\x6a\x50\x3d\xcc\x0f\xb7\x0e\x18\xb8\x93\xf8\x42\xa4\x31\xc9\x72\xec\xd3\x8f\xc9\x8b\x77\x82\xf0\xcf\x76\x03\x8f\x13\x75\x41\x89\xdd\xc4\xfc\xe6\x57\x63\x35\x9b\x58\x09\xe3\xa8\xb2\xff\x03\x8f\x65\x74\x10\x8d\xdd\x07\x80\xbe\x31\xd3\x52\x02\x11\xe5\x1a\x9b\xfa\xd9\xd1\xf9\xd0\x8f\x49\x29\x34\x90\x42\x47\xd1\x66\xa2\x97\x9c\xa3\xed\xa6\xfe\x91\xcb\xa6\xa6\x2a\xc3\x63\xf7\xfa\xb0\x45\xb0\xe6\xcc\xed\x17\xaf\xe2\xdf\xd4\xb6\x35\x51\x7e\xf9\x75\x58\x66\x90\xa0\xdf\xa4\xcb\x11\xfd\x76\x1e\x98\x97\xdc\x4d\x96\x0a\x67\xa3\xc2\x32\x1e\x3b\xb1\xf3\x71\x58\x37\x2c\x9e\x5e\xb7\x82\x93\x75\xc7\xe7\xa9\x75\xcf\x27\xdc\xfb\xa3\x52\x2e\xd8\xbc\x8f\x6d\x42\x4e\x10\xfe\x3b\xaf\x77\x2b\xce\x82\x97\xb1\xd1\x9e\x32\xa2\x40\xe2\x09\x2a\xfc\x69\xe6\xd6\xaf\x4f\x06\x4d\x60\x78\x18\x36\xd8\xc7\x0d\xee\x06\x4e\xda\x07\xd3\xd0\x31\x1a\x9f\x1f\x39\x8a\xd6\xf0\xf6\x4f\x3d\x21\x13\x87\x75\xfe\xe8\xfb\x60\x0c\x5a\x85\x98\xd2\x59\xe2\x81\xe6\x40\xf8\x5f\xd8\xfc\x25\x58\x3f\xea\xff\x0f\x07\x92\xde\x82\x92\x8e\xfd\xee\x11\x65\x06\x65\x55\x89\x5d\xfd\x3e\xdf\x10\x55\xae\x33\x01\xb6\xb8\x0f\x4a\xce\x14\x65\x2d\x1c\x3d\x61\x35\xfe\x1e\xbd\x98\x79\xe9\xfa\x1d\x84\xe3\xab\xcc\x9d\xc3\xe4\xf8\xfd\xbc\xc0\xfc\xee\x77\x28\x95\x55\xff\xb0\x06\xa4\xfb\xc7\x6f\x65\x9b\x33\xf7\xf3\xc8\x6d\xfa\x3f\xe3\xdd\xfe\x0e\xb0\xb7\x97\x84\xfd\xd4\xfc\x18\x26\x40\x7d\x4d\x73\xab\xfb\x51\x36\x9a\x0e\x86\xff\x0e\x00\x00\xff\xff\x95\x38\x80\x80\x00\x21\x00\x00")

func staticJavascriptMapzenWhosonfirstInspectorJsBytes() ([]byte, error) {
	return bindataRead(
		_staticJavascriptMapzenWhosonfirstInspectorJs,
		"static/javascript/mapzen.whosonfirst.inspector.js",
	)
}

func staticJavascriptMapzenWhosonfirstInspectorJs() (*asset, error) {
	bytes, err := staticJavascriptMapzenWhosonfirstInspectorJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/javascript/mapzen.whosonfirst.inspector.js", size: 8448, mode: os.FileMode(420), modTime: time.Unix(1563909058, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticJavascriptMapzenWhosonfirstRenderJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\xc1\x6e\xdb\x3c\x0c\x3e\xdb\x4f\x41\xf8\x3f\xd4\x46\xf2\xbb\xdd\xb5\xae\x31\x14\xc3\xae\x3b\xed\x36\x14\x85\x62\x31\x8b\x16\xc5\x0e\x24\xa6\x49\xd7\x06\xd8\x3b\xec\x0d\xf7\x24\x03\x25\xd9\xb1\x13\xc7\x3b\x14\xb5\xad\xef\xfb\x48\x91\x1f\x89\xbc\x08\x03\x1b\xb1\xfd\x89\x35\x94\xed\xc3\xfb\x3b\xbc\x1d\x8b\xd8\xbf\xe5\xfb\x55\x63\x9b\x7a\xa9\x8c\xa5\x0e\x32\xf8\x18\xe0\x23\xf8\xdc\x60\x2d\xd1\x40\x09\xe9\x72\x57\x57\xa4\x9a\x3a\xcd\xde\xe2\x38\xe2\xa8\x16\xf5\x12\x4a\xe0\xd7\xe8\xc6\x03\x9f\xa5\x20\x71\x73\x0f\x1d\x58\xce\xa1\xa2\x83\xa3\x44\x8e\xb4\x37\x62\xbb\x75\x8a\xb2\xa9\x76\x1b\xac\x29\xaf\x0c\x0a\xc2\xcf\x1a\xf9\x2d\x4d\xa4\x7a\x49\xb2\x82\xf1\x01\x9b\x5b\xa4\x47\x22\xa3\x16\x3b\xc2\x34\xa9\xb4\xb0\x36\x99\x43\x22\x77\x1b\x56\x22\xb1\xd0\xf8\xbf\x41\xbb\x6d\x6a\xab\x5e\x90\xc9\x6d\x34\x9f\x95\x13\xe3\x3f\xb5\x84\xf4\xd1\x18\xf1\x9a\x2b\xeb\xfe\xa7\x32\xcb\xde\xf8\x24\xea\x2e\xca\xb7\x0a\xd7\x7e\xd6\xca\x52\x7b\x05\x27\x72\x8c\x23\x00\x00\x7e\x44\x6d\x11\x58\x90\x5e\xb7\xd8\x2c\x53\x99\x41\x59\x42\xd2\x2c\x7e\x60\x45\xc9\x94\xaa\x54\xd5\xb9\x6a\x27\xe8\x69\x9c\x7a\xd5\xd4\x84\x35\x9d\x71\x09\x0f\x3d\xee\x30\xc6\xb5\x82\xda\xad\xa8\x93\xac\x88\x42\x11\x02\x21\xe7\xda\xd6\xf2\xd3\x4a\x69\x99\x86\x60\xfd\x74\xda\xe2\xf7\x61\x9e\xe9\x51\x06\x69\x67\xea\xb6\x9f\x85\x17\x3f\xce\x07\x66\x50\x15\x4d\x9a\xc1\xb5\x6e\x22\x73\x77\x1e\xcc\xe0\x9e\xaf\x59\xc1\x0b\x79\x27\x48\x24\xa1\xb4\x75\xb4\xb6\x59\xcb\xc6\x40\xba\x06\x55\x83\x74\x9d\xe9\xaa\x6c\x9a\xfd\x54\x7c\x13\x82\x3b\xac\x16\x0b\xd4\xae\x03\x50\xc2\xda\x7f\xef\x0e\x9f\x2b\x3a\xf0\x98\xf0\x05\xe1\x23\xdf\x13\x66\x90\xe4\x09\xcc\x60\x0d\xf7\x17\xf0\x15\x8a\xe9\xa6\xd1\xea\x22\xf4\x25\xfa\x2b\x1e\xe8\x4b\x23\x31\x3d\xa5\x16\x48\x5e\x7f\xd0\x3c\x87\x71\xc7\x23\x1e\xbb\x9a\x86\x6c\xd3\xe8\x48\x8b\x46\xbe\x9e\x3b\x5a\x90\x48\xe5\xb7\xf5\xd3\xdc\xd5\x21\x30\x82\xfa\x20\x09\x26\xf7\x05\x4d\xb3\x1f\x9c\xfb\xbc\x03\xe2\xfc\x70\xe0\x52\xcf\xf7\xae\x18\x78\xb4\xd9\x77\xb3\xea\x41\xc1\xa9\x0e\x5a\x78\x93\x46\x3d\x97\xf2\x90\x8f\xba\xb4\x73\x8f\x2f\xd5\xce\x17\x2a\xd7\x58\x7f\xa7\xd5\x60\xa7\x84\xc3\x12\xee\xba\xb9\x77\x21\x2f\x26\x37\xf9\xf3\xeb\x77\x32\xbe\x4f\x4e\x3a\x0f\x25\x7c\xb8\xae\x13\x6a\x7d\xf7\x34\x2e\xe3\xdc\xa2\xec\x54\x4f\x77\xfa\x72\x36\x98\xa6\xca\xbb\x02\x14\x3c\xf8\xbb\x16\xa0\x66\xb3\x90\x46\xd7\x7b\x45\xb8\x99\x50\xd6\xaa\x6f\xda\xeb\x46\x51\x3e\x79\x9e\x90\xff\x78\x42\x54\xbf\xa5\x1c\xe3\x9a\x67\xf8\x66\x83\x33\x06\x8f\xb7\x9b\xa1\x23\xdd\xe6\x36\x8c\x77\xdb\xb3\xdd\x5a\xf2\x23\x2e\x8b\xe8\xf6\xd6\xa7\xbf\xa2\x8d\xb6\x5b\xac\x94\xd0\xd5\x4a\x18\x9b\xca\xac\xe8\x33\x78\xc5\xfe\x7b\x03\x33\x9a\x1f\xcf\xb6\x98\x92\x7d\x4b\x8c\x00\x48\x91\xc6\x13\x86\x1b\x77\x0a\x3d\xb9\x17\x4e\x1b\xc1\xc9\xf6\x2b\x17\x76\x41\xbf\x64\x8c\x69\x4b\x16\xc5\x11\xff\x24\xe8\x3b\xb0\x88\xe3\x63\x96\x66\x45\x14\xff\x0d\x00\x00\xff\xff\x8f\x00\x04\x97\x74\x08\x00\x00")

func staticJavascriptMapzenWhosonfirstRenderJsBytes() ([]byte, error) {
	return bindataRead(
		_staticJavascriptMapzenWhosonfirstRenderJs,
		"static/javascript/mapzen.whosonfirst.render.js",
	)
}

func staticJavascriptMapzenWhosonfirstRenderJs() (*asset, error) {
	bytes, err := staticJavascriptMapzenWhosonfirstRenderJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/javascript/mapzen.whosonfirst.render.js", size: 2164, mode: os.FileMode(420), modTime: time.Unix(1563909755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticCssMapzenWhosonfirstInspectorCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xdd\x8e\x9b\x30\x10\x85\xef\x79\x8a\xa9\xa2\xbd\x74\xc4\xa6\x8d\x54\x99\xa7\x71\xec\x01\xac\xf8\x87\x8e\x4d\x96\x6d\x95\x77\xaf\xc0\x26\x05\xc2\xee\xaa\xe2\x8a\xf9\xf1\x77\xec\x73\x0e\x52\xb8\x9b\x08\xf0\xa7\x00\x00\xb0\x82\x1a\xed\x38\xbc\xa2\xad\x8a\x7b\x51\x1c\xac\xe8\x72\xab\x45\xdd\xb4\x91\xc3\xf7\xb2\xec\x86\xd4\x1c\xd8\xaf\x1e\xe9\x3d\x0f\x5c\x3c\x29\x24\x0e\xa7\x6e\x80\xe0\x8d\x56\x70\x28\xcb\xb2\x5a\x2e\x9f\xa7\xd5\x04\x1a\xd8\x4e\x71\xa4\xb3\x8b\x8f\xd1\x5b\xfe\xd0\x90\x20\xb5\x27\x9b\x49\x9d\x50\x4a\xbb\x86\xc3\xf1\x3c\xce\x2c\x4a\xcc\x60\x1d\x17\xf2\x15\x46\xa1\xcd\x7c\x3b\x7f\x43\xaa\x8d\x7f\xe3\x10\x24\x79\x63\xe0\x9b\xb6\x9d\xa7\x28\x5c\x5c\xc9\xcc\x57\xdc\xe8\x5c\x55\x77\x85\x12\x86\xde\xc4\xff\xa5\xc1\x3e\x0e\xbe\xe6\x05\xdf\x93\xc4\x87\x75\x9b\xd5\xcf\x79\x4f\xdd\x4f\xe5\xde\x8b\x22\x8a\x8b\x99\x59\x46\x3b\x9c\x61\xa7\xd9\x82\xda\xbb\xc8\x6a\x61\xb5\x79\xe7\x10\x84\x0b\x2c\x20\xe9\x3a\x35\xdf\xb4\x8a\x2d\x7f\x2d\xcb\x97\x6a\x11\x16\x16\x3a\x21\x27\x27\x7b\x17\x30\x73\x28\x43\x6e\x48\x51\x4b\x61\x98\x30\xba\x71\x1c\xa2\xef\xaa\xb5\xfd\x9b\xf7\x49\x85\xf1\x7f\x3a\xa7\x9d\x73\x29\xe4\xb5\x21\xdf\x3b\xc5\xa4\x37\x9e\xf8\x01\xd5\xf8\x55\xab\xd4\xa6\xc4\xc6\x56\xbb\x54\x8f\x38\xc4\x4c\x1e\x33\xf5\xcc\xd9\x31\xe6\x78\xda\xc4\x91\xc3\xf1\x74\x46\x3b\xc9\x51\x59\xce\xee\xc1\xeb\xf9\x0f\x60\x59\xea\x3f\xa5\x5b\x8b\x1e\x71\x4f\x5e\x45\x82\x07\x35\xbd\xff\x8f\x9f\x2f\x5f\xfa\x3e\x9d\xd4\xd1\x6c\xf5\xe4\x6a\xd0\xbf\x91\x07\x2b\xc6\xee\x32\x49\xe7\xdd\x24\x2d\x93\xf8\x3c\x71\x2f\x8a\xa3\x34\x5a\x5e\x99\x9d\x19\xc9\x16\xb8\x98\x1e\x17\x8f\xaf\x50\x7a\x12\x51\x7b\xc7\x7b\xa7\x90\xc6\xd0\xa5\x75\x24\xf2\xf4\x91\xbb\xd0\x69\x77\xdd\x10\xff\x06\x00\x00\xff\xff\xb3\x98\xd1\xb6\xe5\x04\x00\x00")

func staticCssMapzenWhosonfirstInspectorCssBytes() ([]byte, error) {
	return bindataRead(
		_staticCssMapzenWhosonfirstInspectorCss,
		"static/css/mapzen.whosonfirst.inspector.css",
	)
}

func staticCssMapzenWhosonfirstInspectorCss() (*asset, error) {
	bytes, err := staticCssMapzenWhosonfirstInspectorCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/mapzen.whosonfirst.inspector.css", size: 1253, mode: os.FileMode(420), modTime: time.Unix(1563909560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticCssMapzenWhosonfirstRenderCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xdf\x6a\xf3\x30\x0c\xc5\xef\xf3\x14\xfa\xf8\xd8\xa5\x4b\x57\xd8\x8d\xf7\x34\x4e\xac\x24\x62\xfe\x87\xac\x6c\x2d\xa3\xef\x3e\x12\xbb\xa1\x66\x2d\x8c\x5c\xe9\x28\x3a\xd2\xef\x78\x71\xf0\xdd\x01\x00\x38\xca\xa2\xb2\x5c\x1c\x2a\xb9\x24\xd4\x10\x62\xc0\xf7\xad\xe5\x0d\x4f\x14\xf4\x31\x9d\x4b\x9d\x8c\xb5\x14\xa6\x22\x5c\xbb\xee\x60\x17\x9f\x90\x41\x4c\xef\x70\xb7\x0b\xa8\x66\xa4\x69\x16\x7d\x42\x5f\x06\xc7\x18\x44\x8d\xc6\x93\xbb\x68\xc8\x26\x64\x95\x91\x69\x2c\xcd\x2f\xb2\x32\xeb\xd7\xe3\xf1\xa5\xd4\x7d\x64\x8b\xac\x72\x32\xc3\xba\x0c\x96\x90\x51\x1e\xec\x13\xae\x2b\x3f\x91\x85\x06\xe3\x94\x71\x34\x05\x0d\x12\x53\x7b\x2f\xec\x04\x95\x68\x13\xd6\xba\x71\x9d\xab\x5f\x6f\x86\x8f\x89\xe3\x12\xac\x1a\xa2\x8b\xac\xff\xa3\x5d\xbf\xe6\x3c\x89\xe9\x3e\xaa\xaa\xf6\x51\x24\xfa\xda\xd8\x16\xdc\x35\x1d\x8e\xa2\x21\x47\x47\x16\x64\xa6\x00\xff\xc8\xa7\xc8\x62\x82\x34\x26\xbc\x85\xf7\xe4\xc7\xdd\x54\xf0\x2c\x95\x78\x35\xfe\xcd\xd7\x46\x70\x38\xbd\xa1\x6f\x71\xf5\x48\x9c\x45\x0d\x33\x39\x7b\x43\xbf\x83\x7b\x72\x68\x6b\xe1\xcc\x63\x87\x5b\x10\x7f\x30\x29\x8f\x79\x9b\x7f\x88\xd5\x52\x34\x5a\x4d\xf5\xb0\xeb\x4d\x04\xd7\xee\x27\x00\x00\xff\xff\xcd\x95\x93\x60\xe8\x02\x00\x00")

func staticCssMapzenWhosonfirstRenderCssBytes() ([]byte, error) {
	return bindataRead(
		_staticCssMapzenWhosonfirstRenderCss,
		"static/css/mapzen.whosonfirst.render.css",
	)
}

func staticCssMapzenWhosonfirstRenderCss() (*asset, error) {
	bytes, err := staticCssMapzenWhosonfirstRenderCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/mapzen.whosonfirst.render.css", size: 744, mode: os.FileMode(420), modTime: time.Unix(1563546049, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/javascript/mapzen.whosonfirst.geojson.js": staticJavascriptMapzenWhosonfirstGeojsonJs,
	"static/javascript/mapzen.whosonfirst.inspector.init.js": staticJavascriptMapzenWhosonfirstInspectorInitJs,
	"static/javascript/mapzen.whosonfirst.inspector.js": staticJavascriptMapzenWhosonfirstInspectorJs,
	"static/javascript/mapzen.whosonfirst.render.js": staticJavascriptMapzenWhosonfirstRenderJs,
	"static/css/mapzen.whosonfirst.inspector.css": staticCssMapzenWhosonfirstInspectorCss,
	"static/css/mapzen.whosonfirst.render.css": staticCssMapzenWhosonfirstRenderCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"mapzen.whosonfirst.inspector.css": &bintree{staticCssMapzenWhosonfirstInspectorCss, map[string]*bintree{}},
			"mapzen.whosonfirst.render.css": &bintree{staticCssMapzenWhosonfirstRenderCss, map[string]*bintree{}},
		}},
		"javascript": &bintree{nil, map[string]*bintree{
			"mapzen.whosonfirst.geojson.js": &bintree{staticJavascriptMapzenWhosonfirstGeojsonJs, map[string]*bintree{}},
			"mapzen.whosonfirst.inspector.init.js": &bintree{staticJavascriptMapzenWhosonfirstInspectorInitJs, map[string]*bintree{}},
			"mapzen.whosonfirst.inspector.js": &bintree{staticJavascriptMapzenWhosonfirstInspectorJs, map[string]*bintree{}},
			"mapzen.whosonfirst.render.js": &bintree{staticJavascriptMapzenWhosonfirstRenderJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
